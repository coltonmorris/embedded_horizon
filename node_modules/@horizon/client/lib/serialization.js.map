{"version":3,"sources":["../src/serialization.js"],"names":[],"mappings":";;;;;;;;QAUgB,W,GAAA,W;QAuBA,S,GAAA,S;;;;AAjChB,IAAM,aAAa,CACjB,QADiB,EACP,QADO,EACG,SADH,EACc,UADd,EAC0B,QAD1B,CAAnB;;AAGA,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,SAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,eAAO;AAC9B,QAAI,GAAJ,IAAW,YAAY,IAAI,GAAJ,CAAZ,CAAX;AACD,GAFD;AAGA,SAAO,GAAP;AACD;;AAEM,SAAS,WAAT,CAAqB,KAArB,EAA4B;AACjC,MAAI,SAAS,IAAb,EAAmB;AACjB,WAAO,KAAP;AACD,GAFD,MAEO,IAAI,WAAW,OAAX,QAA0B,KAA1B,uDAA0B,KAA1B,OAAqC,CAAC,CAA1C,EAA6C;AAClD,WAAO,KAAP;AACD,GAFM,MAEA,IAAI,MAAM,OAAN,CAAc,KAAd,CAAJ,EAA0B;AAC/B,WAAO,MAAM,GAAN,CAAU,WAAV,CAAP;AACD,GAFM,MAEA,IAAI,MAAM,WAAN,KAAsB,MAA1B,EAAkC;AACvC,QAAM,OAAO,IAAI,IAAJ,EAAb;AACA,SAAK,OAAL,CAAa,MAAM,UAAN,GAAmB,IAAhC;AACA,WAAO,IAAP;AACD,GAJM,MAIA;AACL,WAAO,aAAa,KAAb,CAAP;AACD;AACF;;AAED,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,SAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,eAAO;AAC9B,QAAI,GAAJ,IAAW,UAAU,IAAI,GAAJ,CAAV,CAAX;AACD,GAFD;AAGA,SAAO,GAAP;AACD;;AAEM,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AAC/B,MAAI,SAAS,IAAb,EAAmB;AACjB,WAAO,KAAP;AACD,GAFD,MAEO,IAAI,WAAW,OAAX,QAA0B,KAA1B,uDAA0B,KAA1B,OAAqC,CAAC,CAA1C,EAA6C;AAClD,WAAO,KAAP;AACD,GAFM,MAEA,IAAI,MAAM,OAAN,CAAc,KAAd,CAAJ,EAA0B;AAC/B,WAAO,MAAM,GAAN,CAAU,SAAV,CAAP;AACD,GAFM,MAEA,IAAI,iBAAiB,IAArB,EAA2B;AAChC,WAAO;AACL,mBAAa,MADR;AAEL,kBAAY,MAAM,OAAN,KAAkB,IAFzB;;AAIL,gBAAU;AAJL,KAAP;AAMD,GAPM,MAOA;AACL,WAAO,cAAc,KAAd,CAAP;AACD;AACF","file":"serialization.js","sourcesContent":["const PRIMITIVES = [\n  'string', 'number', 'boolean', 'function', 'symbol' ]\n\nfunction modifyObject(doc) {\n  Object.keys(doc).forEach(key => {\n    doc[key] = deserialize(doc[key])\n  })\n  return doc\n}\n\nexport function deserialize(value) {\n  if (value == null) {\n    return value\n  } else if (PRIMITIVES.indexOf(typeof value) !== -1) {\n    return value\n  } else if (Array.isArray(value)) {\n    return value.map(deserialize)\n  } else if (value.$reql_type$ === 'TIME') {\n    const date = new Date()\n    date.setTime(value.epoch_time * 1000)\n    return date\n  } else {\n    return modifyObject(value)\n  }\n}\n\nfunction jsonifyObject(doc) {\n  Object.keys(doc).forEach(key => {\n    doc[key] = serialize(doc[key])\n  })\n  return doc\n}\n\nexport function serialize(value) {\n  if (value == null) {\n    return value\n  } else if (PRIMITIVES.indexOf(typeof value) !== -1) {\n    return value\n  } else if (Array.isArray(value)) {\n    return value.map(serialize)\n  } else if (value instanceof Date) {\n    return {\n      $reql_type$: 'TIME',\n      epoch_time: value.getTime() / 1000,\n      // Rethink will serialize this as \"+00:00\", but accepts Z\n      timezone: 'Z',\n    }\n  } else {\n    return jsonifyObject(value)\n  }\n}\n"]}