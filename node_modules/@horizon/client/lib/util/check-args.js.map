{"version":3,"sources":["../../src/util/check-args.js"],"names":[],"mappings":";;;kBAGwB,S;;AAHxB;;;;;;;AAGe,SAAS,SAAT,CAAmB,IAAnB,EAAyB,IAAzB,EAGkC;AAAA,mEAAJ,EAAI;;AAAA,2BAF7B,QAE6B;AAAA,MAFnB,QAEmB,iCAFR,KAEQ;AAAA,0BAD7B,OAC6B;AAAA,MADpB,OACoB,gCADV,CACU;AAAA,0BAA7B,OAA6B;AAAA,MAApB,OAAoB,gCAAV,CAAU;;AAC/C,MAAI,YAAY,OAAZ,IAAuB,KAAK,MAAL,KAAgB,OAA3C,EAAoD;AAClD,QAAM,SAAS,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,GAApC;AACA,UAAM,IAAI,KAAJ,CAAa,IAAb,8BAA0C,OAA1C,iBAA6D,MAA7D,CAAN;AACD;AACD,MAAI,KAAK,MAAL,GAAc,OAAlB,EAA2B;AACzB,QAAM,UAAU,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,GAArC;AACA,UAAM,IAAI,KAAJ,CACD,IADC,+BAC6B,OAD7B,iBACgD,OADhD,OAAN;AAED;AACD,MAAI,KAAK,MAAL,GAAc,OAAlB,EAA2B;AACzB,QAAM,UAAU,YAAY,CAAZ,GAAgB,EAAhB,GAAqB,GAArC;AACA,UAAM,IAAI,KAAJ,CACD,IADC,yBACuB,OADvB,iBAC0C,OAD1C,OAAN;AAED;AACD,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,QAAI,CAAC,QAAD,IAAa,KAAK,CAAL,MAAY,IAA7B,EAAmC;AACjC,UAAM,aAAa,YAAY,CAAZ,SAAoB,uBAAQ,IAAI,CAAZ,CAApB,GAAuC,EAA1D;AACA,YAAM,IAAI,KAAJ,SAAgB,UAAhB,qBAA0C,IAA1C,uBAAN;AACD;AACD,QAAI,KAAK,CAAL,MAAY,SAAhB,EAA2B;AACzB,YAAM,IAAI,KAAJ,UACG,uBAAQ,IAAI,CAAZ,CADH,qBACiC,IADjC,sBAAN;AAED;AACF;AACF","file":"check-args.js","sourcesContent":["import ordinal from './ordinal.js'\n\n// Validation helper\nexport default function checkArgs(name, args, {\n                    nullable: nullable = false,\n                    minArgs: minArgs = 1,\n                    maxArgs: maxArgs = 1 } = {}) {\n  if (minArgs === maxArgs && args.length !== minArgs) {\n    const plural = minArgs === 1 ? '' : 's'\n    throw new Error(`${name} must receive exactly ${minArgs} argument${plural}`)\n  }\n  if (args.length < minArgs) {\n    const plural1 = minArgs === 1 ? '' : 's'\n    throw new Error(\n      `${name} must receive at least ${minArgs} argument${plural1}.`)\n  }\n  if (args.length > maxArgs) {\n    const plural2 = maxArgs === 1 ? '' : 's'\n    throw new Error(\n      `${name} accepts at most ${maxArgs} argument${plural2}.`)\n  }\n  for (let i = 0; i < args.length; i++) {\n    if (!nullable && args[i] === null) {\n      const ordinality = maxArgs !== 1 ? ` ${ordinal(i + 1)}` : ''\n      throw new Error(`The${ordinality} argument to ${name} must be non-null`)\n    }\n    if (args[i] === undefined) {\n      throw new Error(\n        `The ${ordinal(i + 1)} argument to ${name} must be defined`)\n    }\n  }\n}\n"]}