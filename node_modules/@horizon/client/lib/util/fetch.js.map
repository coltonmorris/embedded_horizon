{"version":3,"sources":["../../src/util/fetch.js"],"names":[],"mappings":";;;kBAOwB,S;;AAPxB;;AACA;;AACA;;AAEA,OAAO,IAAP,GAAc,MAAd;AACA,QAAQ,4DAAR;;AAEe,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACrC,SAAO,uBAAW,WAAX,CAAuB,MAAM,GAAN,CAAvB,EACJ,QADI,CACK,oBAAY;AACpB,QAAM,cAAc,SAAS,OAAT,CAAiB,GAAjB,CAAqB,cAArB,CAApB;AACA,QAAI,eAAe,YAAY,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAAhE,EAAmE;AACjE,aAAO,SAAS,IAAT,EAAP;AACD,KAFD,MAEO;AACL,aAAO,SAAS,IAAT,GAAgB,IAAhB,CAAqB;AAAA,eAAS;AACnC,iBAAO,uBAD4B;AAEnC,wBAAc;AAFqB,SAAT;AAAA,OAArB,CAAP;AAID;AACF,GAXI,CAAP;AAYD","file":"fetch.js","sourcesContent":["import { Observable } from 'rxjs/Observable'\nimport 'rxjs/add/observable/fromPromise'\nimport 'rxjs/add/operator/mergeMap'\n\nglobal.self = global\nrequire('imports?this=>global!exports?global.fetch!isomorphic-fetch')\n\nexport default function fetchJSON(url) {\n  return Observable.fromPromise(fetch(url))\n    .mergeMap(response => {\n      const contentType = response.headers.get('content-type')\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        return response.json()\n      } else {\n        return response.text().then(resp => ({\n          error: 'Response was not json',\n          responseBody: resp,\n        }))\n      }\n    })\n}\n"]}